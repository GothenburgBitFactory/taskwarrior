.TH task-sync 5 2016-02-24 "${PACKAGE_STRING}" "User Manuals"

.SH NAME
task-sync \- A discussion and tutorial for the various task(1) data
synchronization capabilities.

.SH INTRODUCTION

Taskwarrior can "synchronize" your tasks to a server. This has a few benefits:
.br
  - Makes your tasks accessible from multiple systems.
.br
  - Provides a backup of your tasks.
.br
  - Allows internal storage to be reused.

.SH LOCAL SYNCHRONIZATION
Taskwarrior can sync your tasks locally. While this setup does not make your
tasks accessible from multiple systems, it does provide a convenient backup
and allow internal storage to be reused. If you later decide to sync to a
server, the transition is easy.

Set 'sync.local.server_dir' to the directory where the synchronized data should
be stored:

    $ task config sync.local.server_dir /path/to/sync

Then run 'task sync' to synchronize to this local "server".

.SH SERVER SYNCHRONIZATION
Configure each instance of Taskwarrior which you would like to keep in sync
with the same settings.  You will need the following information from the
adminisrator of the server:
.br
  - The server's URL ("origin", such as "https://tw.example.com")
.br
  - A client key ("client_key") identifying your tasks
.br
  - An encryption secret ("encryption_secret") used to encrypt and decrypt your
    tasks.

Configure Taskwarrior with these details:

    $ task config sync.server.origin            <origin>
    $ task config sync.server.client_key        <client_key>
    $ task config sync.server.encryption_secret <encryption_secret>

Then run 'task sync' to synchronize the tasks to the server.

To add a new, empty Taskwarrior installation to the set of replicas, such as
when setting up a new system, run 'task sync' in that installation before
adding any tasks.

It is easy to transition from local to server synchronization: simply change
all replicas to use the same "sync.server.*" configuration.

.SH RUNNING TASKCHAMPION-SYNC-SERVER

The taskchampion sync server is an HTTP server supporting multiple users.
Users are identified by a client key, and users with different client keys are
entirely independent.  Task data is encrypted by Taskwarrior, and the sync
server never seens un-encrypted data.

To start the server, run it in your preferred HTTP hosting environment, using
`--port` to set the TCP port on which it should listen.  It is recommended to
use TLS to protect communications with the server, but this is not required.

The server stores its data in a database, the path to which is given by the
`--data-dir` argument, defaulting to "/var/lib/taskchampion-sync-server".

The sync server will automatically create a new user whenever presented with a
new client key. To add a new user, create a new client key with a tool like
`uuidgen` or an online UUID generator. Supply this, along with the origin, for
the user's Taskwarrior config. The user should invent their own
"encryption_secret".

.SH AVOIDING DUPLICATE RECURRING TASKS

If you run multiple clients that sync to the same server, you will need to run
this command on your primary client (the one you use most often):

    $ task config recurrence on

And on the other clients, run:

    $ task config recurrence off

This protects you against the effects of a sync/duplication bug.

.SH ALTERNATIVES
There are two alternatives to using a synchronization server:

1) Version control systems, such as git, hg, svn
.br
2) File sharing systems, such as DropBox, Google Drive


.SH ALTERNATIVE 1: VERSION CONTROL SYSTEMS
There are several good, distributed VCS systems (git, hg, ...) and centralized
VCS systems (svn, cvs ...), and they all function in a similar fashion for our
purposes.

Setup is straightforward.  You place your .task directory under revision
control.  You then need to perform a regular commit/push/pull/update to make
sure that the data is propagated when needed.  You can even do this using shell
scripts so that every task command is preceded by a 'pull' and followed by
a 'push'.

Strengths:
.br
  - Good data transport mechanisms
.br
  - Secure transport options

Weaknesses:
.br
  - You need proficiency with VCS tools
.br
  - You will need to manually resolve conflicts frequently
.br
  - You need to provide the mechanism for making sure copies are up to date
.br
  - Data is stored in a binary format, so the version-control repository will grow quickly.


.SH ALTERNATIVE 2: FILE SHARING SERVICES
There are many file sharing services, such as DropBox, Amazon S3, Google Drive,
SkyDrive and more.  This technique involves storing your .task directory in a
shared directory under the control of the file hosting services.

Syncing happens quickly, although it is possible to run into conflict situations
when there is no network connectivity, and the tasks are modified in two
separate locations.  This is because the file hosting service knows only about
files, and it has no idea how to merge tasks.  Avoid this problem by never
modifying the same task on two machines, without an intervening sync.

Setup simply involves creating the directory and modifying your data.location
configuration variable like this:

    $ task config data.location /path/to/shared/directory

Strengths:
.br
  - Good client support
.br
  - Easy setup
.br
  - Transparent use

Weaknesses:
.br
  - Tasks are not properly merged


.SH "CREDITS & COPYRIGHTS"
Copyright (C) 2006 \- 2021 T. Babej, P. Beckingham, F. Hernandez.

Taskwarrior is distributed under the MIT license. See
https://www.opensource.org/licenses/mit-license.php for more information.

.SH SEE ALSO
.BR task(1),
.BR taskrc(5),
.BR task-color(5),

For more information regarding Taskwarrior, see the following:

.TP
The official site at
<https://taskwarrior.org>

.TP
The official code repository at
<https://github.com/GothenburgBitFactory/taskwarrior>

.TP
You can contact the project by emailing
<support@GothenburgBitFactory.org>

.SH REPORTING BUGS
.TP
Bugs in Taskwarrior may be reported to the issue-tracker at
<https://github.com/GothenburgBitFactory/taskwarrior/issues>
